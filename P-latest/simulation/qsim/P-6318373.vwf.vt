// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2018 23:03:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          state_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module state_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] block_size;
reg clock_i;
reg lrq_i;
reg mode_i;
reg [9:0] result_addr;
reg run_i;
reg [9:0] start_addr;
// wires                                               
wire [9:0] addr_o;
wire clk_en_o;
wire lrq_o;
wire w_r_o;

// assign statements (if any)                          
state_machine i1 (
// port map - connection between master ports and signals/registers   
	.addr_o(addr_o),
	.block_size(block_size),
	.clk_en_o(clk_en_o),
	.clock_i(clock_i),
	.lrq_i(lrq_i),
	.lrq_o(lrq_o),
	.mode_i(mode_i),
	.result_addr(result_addr),
	.run_i(run_i),
	.start_addr(start_addr),
	.w_r_o(w_r_o)
);
initial 
begin 
#100000000 $finish;
end 

// clock_i
always
begin
	clock_i = 1'b0;
	clock_i = #25000 1'b1;
	#25000;
end 

// mode_i
initial
begin
	mode_i = 1'b0;
	mode_i = #57600000 1'b1;
end 

// run_i
initial
begin
	run_i = 1'b0;
	run_i = #50000 1'b1;
	run_i = #57550000 1'b0;
	run_i = #640000 1'b1;
end 
// block_size[ 9 ]
initial
begin
	block_size[9] = 1'b0;
end 
// block_size[ 8 ]
initial
begin
	block_size[8] = 1'b1;
end 
// block_size[ 7 ]
initial
begin
	block_size[7] = 1'b0;
end 
// block_size[ 6 ]
initial
begin
	block_size[6] = 1'b0;
end 
// block_size[ 5 ]
initial
begin
	block_size[5] = 1'b1;
end 
// block_size[ 4 ]
initial
begin
	block_size[4] = 1'b0;
end 
// block_size[ 3 ]
initial
begin
	block_size[3] = 1'b1;
end 
// block_size[ 2 ]
initial
begin
	block_size[2] = 1'b0;
end 
// block_size[ 1 ]
initial
begin
	block_size[1] = 1'b1;
end 
// block_size[ 0 ]
initial
begin
	block_size[0] = 1'b1;
end 
// result_addr[ 9 ]
initial
begin
	result_addr[9] = 1'b1;
end 
// result_addr[ 8 ]
initial
begin
	result_addr[8] = 1'b0;
end 
// result_addr[ 7 ]
initial
begin
	result_addr[7] = 1'b0;
end 
// result_addr[ 6 ]
initial
begin
	result_addr[6] = 1'b1;
end 
// result_addr[ 5 ]
initial
begin
	result_addr[5] = 1'b0;
end 
// result_addr[ 4 ]
initial
begin
	result_addr[4] = 1'b1;
end 
// result_addr[ 3 ]
initial
begin
	result_addr[3] = 1'b1;
end 
// result_addr[ 2 ]
initial
begin
	result_addr[2] = 1'b0;
end 
// result_addr[ 1 ]
initial
begin
	result_addr[1] = 1'b0;
end 
// result_addr[ 0 ]
initial
begin
	result_addr[0] = 1'b0;
end 
// start_addr[ 9 ]
initial
begin
	start_addr[9] = 1'b0;
end 
// start_addr[ 8 ]
initial
begin
	start_addr[8] = 1'b0;
end 
// start_addr[ 7 ]
initial
begin
	start_addr[7] = 1'b0;
end 
// start_addr[ 6 ]
initial
begin
	start_addr[6] = 1'b0;
end 
// start_addr[ 5 ]
initial
begin
	start_addr[5] = 1'b0;
end 
// start_addr[ 4 ]
initial
begin
	start_addr[4] = 1'b0;
end 
// start_addr[ 3 ]
initial
begin
	start_addr[3] = 1'b0;
end 
// start_addr[ 2 ]
initial
begin
	start_addr[2] = 1'b0;
end 
// start_addr[ 1 ]
initial
begin
	start_addr[1] = 1'b0;
end 
// start_addr[ 0 ]
initial
begin
	start_addr[0] = 1'b0;
end 
endmodule

